/********************************************************************
* 연산자 (Operator)
*
* 프로그래밍 언어에서는 일반적인 수학 연산과 유사한 연산자들이 지원됨
* C++는 여러 연산자를 제공하며 기본 연산을 수행할 수 있음
*********************************************************************/

namespace _02.Operator
{

    internal class Program
    {
        static void Main(string[] args)
        {

            bool o = false;
            int a = 0;
            float b = 0.0f;

            /**************************************************************
            * 산술 연산자
            **************************************************************/
            // <이진 연산자>
            a = 1 + 2;   // + (더하기)
            a = 3 - 1;   // - (빼기)
            a = 3 * 3;   // * (곱하기)
            a = 5 / 2;   // / (나누기) : 정수 나눗셈은 나머지(소숫점 아래)를 버림
            b = 5.0f / 2.0f; // 소수점 이하를 나타내기 위해서는 실수형 자료형을 사용해야 함
            a = 13 % 3;     // % (나머지)

            // <단항 연산자>
            a = +3;     // + 단항연산자(양수) : 값을 그대로 둠
            a = -3;     // - 단항연산자(음수) : 값을 마이너스로 변환 >> 2의 보수로 만든다
            ++a;        // ++ 전위증가연산자 : 원래값에 1 증가 (a = a + 1;과 같다)
            a++;        // ++ 후위증가연산자 : 원래값에 1 증가
            --a;        // -- 전위감소연산자 : 원래값에 1 감소 (a = a - 1;과 같다)
            a--;        // -- 후위감소연산자 : 원래값에 1 감소

            // <전위연산자와 후위연산자> ; 순서의 차이
            // 전위연산자 : 더하고 값 불러오기
            a = 0;
            Console.WriteLine(a); // 0 출력
            Console.WriteLine(++a); // 1 출력
            Console.WriteLine(a); // 1 출력

            // 후위연산자 : 값 불러오고 더하기
            a = 0;
            Console.WriteLine(a); // 0 출력
            Console.WriteLine(a++); // 0 출력 - 이 출력 과정 이후에 1 증가함, 그 다음 출력부터 1로 나옴
            Console.WriteLine(a); // 1 출력



            /**************************************************************
            * 대입 연산자
            **************************************************************/

            // <대입 연산자>
            a = 10;     // =    대입연산자(대입) : 오른쪽 값을 왼쪽 변수에 대입

            // <복합 대입 연산자>
            // 이진 연산자(op)의 경우
            // x op= y 는 x = x op y 와 동일
            a = a + 10;
            a += 10; // 위의 식을 줄인 것 (동일한 식임)

            a = a * 10;
            a *= 10; // 위의 식을 줄인 것 (동일한 식임)

            /****************************************************************
            * 비교 연산자
            ****************************************************************/

            // <비교 연산자>
            o = 3 > 1;      // > : 왼쪽 데이터가 더 클 경우 true
            o = 3 < 1;      // < : 왼쪽 데이터가 더 작을 경우 true
            o = 3 >= 1;     // >= : 왼쪽 데이터가 더 크거나 같을 경우 true
            o = 3 <= 1;     // <= : 왼쪽 데이터가 더 작거나 같을 경우 true
            o = 3 == 1;     // == : 두 데이터가 같을 경우 true
            o = 3 != 1;     // !=: 두 데이터가 다른 경우 true


            /****************************************************************
             * 논리 연산자
             ****************************************************************/

            // <논리 연산자>
            o = !false;     //!(Not) : true >> false , flase >> true : ~가 아니다

            //(스킬 쓸 수 있는 상황) 스킬을 쓰려면 쿨타임이 안남아 있어야 하면서 (그리고) 마나도 스킬 마나보다 높아야
            o = true && false;      //&&(And) : 두 데이터 모두 true일 때 true
            //  true && true;  // true
            //  true && false; // false

            // (어몽어스 시민편 승리) 마피아를 전부 투표로 잡거나 (또는) 미션 전부 클리어
            o = true || false;      // ||(Or) : 두 데이터 중 하나라도 true면 true / false면 false
                                    //true || true;     // true
                                    //true || false     // true
                                    //false || false    // false

            // <조건부 논리 연산자>
            // 조건부 논리 And 연산자 &&
            // 빠른 계산을 위해 false && x(논리자료형) 의 경우 어떠한 논리자료형이 있어도
            // 결과는 항상 false이기 때문에 false && x 에서 x는 무시하게 됨
            iValue = 10;
            bValue = false && (++iValue > 5); // false&& 등장시 무조건 거짓이기 때문에 뒤에 나오는 연산은 걍 무시함
            Console.WriteLine(iValue);  // output : 10


            // 조건부 논리 Or 연산자 ||
            // 빠른 계산을 위해 true || x(논리자료형) 의 경우 어떠한 논리자료형이 있어도
            // 결과는 항상 true이기 때문에 true || x 에서 x는 무시하게 됨
            iValue = 10;
            bValue = true || (++iValue > 5); //  or은 하나만 참이어도 참이기 때문에, 참이랑 비교 시 비교대상 걍 무시, 빠른 연산을 위해 true||나오는 순간 뒤의 연산은 걍 무시하는거임
            Console.WriteLine(iValue);  // output : 10 , (++iValue > 5)가 아예 무시당함
                                        // 때문에 논리연산 안에서 산술연산 비추
            bValue = (++iValue > 5) || true; // true가 뒤로가면 ㄴㄴ 앞의 연산 진행함

            /****************************************************************
            * 비트 연산자 : 개빠르다
            ****************************************************************/

            // <단항 연산자>
            a = 0x0019;         //0b---- 2진수 , 0x---- 16진수

            a = ~0x1f;          // ~(비트 보수) : 데이터를 비트단위로 보수 연산 ex) 1001 >> 0110  (보수 : 0->1, 1->0)

            // <이진 연산자> 이해안되면 까먹으셈
            a = 0x11 & 0x83;   // &(And) : 데이터를 비트단위로 And 연산
            a = 0x11 | 0x83;   // |(Or)  : 데이터를 비트단위로 Or 연산
            a = 0x11 ^ 0x83;   // ^(Xor) : 데이터를 비트단위로 Xor 연산 (둘이 달라야 참(1), 같으면 거짓(0))


            // <비트 쉬프트 연산자> 2진수나 16진수로 숫자 표현 (2진수는 너무 길어서)
            // 0010 << 1  ->  0100 << 1  ->  1000
            a = 0x10 << 1;      // << : 왼쪽의 피연산자의 비트를 오른쪽 피연산자만큼 왼쪽으로 이동 : 2진수의 경우 <<1은 *2와 같음
            a = 0x10 >> 1;      // >> : 왼쪽의 피연산자의 비트를 오른쪽 피연산자만큼 오른쪽으로 이동 : 2진수의 경우 >>1은 /2와 같음
            //쓰는 이유: 다른거에 비해서 존나 빠름, 컴퓨터는 나누기보다 곱하기가 훨씬 빠름 100/2보다 100*0.5가 더 빠르단 소리임 근데 100>>1이 100*5보다도 빠름 같은 값인데




            /****************************************************************
             * 연산자 우선순위
             *
             * 여러 연산자가 있는 식에서 우선 순위가 높은 연산자가 먼저 계산
             ****************************************************************/

            // <연산자 우선순위>
            // 1. 기본 연산        : a[i], x++, x--
            // 2. 단항 연산        : +x, -x, !x, ~x, ++x, --x, (Type)x
            // 3. 곱하기 연산      : x * y, x / y, x % y
            // 4. 더하기 연산      : x + y, x - y
            // 5. 시프트 연산      : x << y, x >> y
            // 6. 비교 연산        : x < y, x > y, x <= y, x >= y
            // 7. 같음 연산        : x == y, x != y
            // 8. 논리 AND 연산    : x & y, x && y
            // 9. 논리 XOR 연산    : x ^ y
            // 10. 논리 OR 연산    : x | y, x || y
            // 11. 대입 연산       : x = y, x op= y

            // 기본(단항) > 곱하기 > 더하기 > 비교 > 논리 > 대입
            // 헷갈리면 걍 괄호씌워라

        }
    }
}
