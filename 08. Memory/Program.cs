namespace _08._Memory // 컴퓨터가 메모리를 어떤식으로 관리하는가?
{
    internal class Program

    //실제로 컴퓨터가 어떻게 동작하는지

    // 빠른 계산 (CPU - 연산장치<인간의 뇌에 해당>)
    // 저장 장치 (Memory)
    /****************************************************************
     * 메모리 (Memory)
     *
     * 프로그램을 처리하기 위해 필요한 정보를 저장하는 기억장치
     * 프로그램은 메모리에 저장한 정보를 토대로 명령들을 수행함
     ****************************************************************/

    /****************************************************************************
     * 메모리구조
     *
     * 프로그램은 효율적인 메모리 관리를 위해 메모리 영역을 구분 (그냥 빈 곳에 때려넣는게 아님)
     * 데이터는 각 역할마다 저장되는 영역을 달리하여 접근범위, 생존범위 등을 관리
     *****************************************************************************/

    /* <메모리 구조>
      (0x0000...) +-------------+
      낮은주소    | 코드 영역   | => 실행할 프로그램의 코드
                  +-------------+
                  | 데이터 영역 | => 정적변수
                  +-------------+
                  | 힙 영역     | => 클래스 인스턴스  (힙 영역은 크기가 정해져 있지 않음) : 객체 저장소
                  +~~~~~~~~~~~~~+
                  |             |
                  +~~~~~~~~~~~~~+
      높은주소    | 스택 영역   | => 지역변수, 매개변수  (스택 영역은 크기가 정해져 있지 않음) : 지역변수, 매개변수 저장소
      (0xFFFF...) +-------------+
   */

    // < 코드 영역>
    // 프로그램이 실행할 코드가 저장되는 영역
    // 데이터가 변경되지 않는(변경불가) 읽기전용 데이터

    // < 데이터 영역 >
    // 정적변수가 저장되는 영역
    // 프로그램의 시작시 할당되며 종료시 삭제됨

    // < 스택 영역 >
    // 지역변수와 매개변수가 저장되는 영역
    // 함수의 호출시 할당되며 종료시 삭제됨 (함수의 시작부터 종료까지만 유지됨)

    // < 힙 영역 >
    // 클래스 인스턴스(객체)가 저장되는 영역
    // 인스턴스를 생성시 할당되며 더이상 사용하지 않을시 자동으로 삭제됨 (내가 원할 때 만들고 더 이상 그 객체를 사용하지 않을때 자동으로 삭제됨)
    // 인스턴스를 참조하고 있는 변수가 없을 때 더이상 사용하지 않는다고 판단
    // 더이상 사용하지 않는 인스턴스는 가비지 컬렉터가 특정 타이밍에 수거해감


    // <변수의 접근범위와 생존범위>
    /*
                 | 메모리영역    접근 범위       생존 범위
        ---------+---------------------------------------------------------
        정적변수 | 데이터영역    어디서든        프로그램 시작에서 끝까지
        ---------+---------------------------------------------------------
        지역변수 | 스택영역      블록 내부       블록 시작에서 끝까지
        매개변수 |
        ---------+---------------------------------------------------------
        인스턴스 | 힙영역        참조가능한      인스턴스 생성부터
                 |               모든 구역       더이상 사용하지 않을때까지
    */




    {
        /**************************************************************************
    * 스택 영역
    *
    * 함수호출스택을 이용하여 호출(시작)과 종료에 연관되는 데이터를 저장하는 영역
    * 프로그램은 스택구조를 통해 함수에서 사용한 데이터들을 효율적으로 관리함
    **************************************************************************/

        // <함수호출스택>
        void Stack2(int a)
        {
            int b = 1;
            a = 3;
        }
        void Stack1(int a)
        {
            int b = 10;
            a = 2;
            Stack2(a);
        }

        void Main1()
        {
            int b = 20;
            int a = 1;  //지역변수 : 블록 안에서 생성되어 블록 끝에서 소멸 (블록 내부에서만 사용가능)
            Stack1(a);
        }

        /*
                           +-----------+                +-----------+                +-----------+
                           |           |                |           |                |           |
                           |           |                |           |                +-----------+
                           |           |                |           |                | Stack2()  |
                           |           |                |           |                | a = 3     |
                           |           |                +-----------+                +-----------+
                           |           |                | Stack1()  |                | Stack1()  |
                           |           |                | a = 2     |                | a = 2     |
                           +-----------+                +-----------+                +-----------+
                           | Main1()   |                | Main1()   |                | Main1()   |
                           | a = 1     |                | a = 1     |                | a = 1     |
            Main1 호출 ->  +-----------+ Stack1 호출 -> +-----------+ Stack2 호출 -> +-----------+

           // 아래부터 위로 차례대로 쌓임 (종료순서는 반대)

                           +-----------+                +-----------+                +-----------+
                           |           |                |           |                |           |
                           |           |                |           |                |           |
                           |           |                |           |                |           |
                           |           |                |           |                |           |
                           +-----------+                |           |                |           |
                           | Stack1()  |                |           |                |           |
                           | a = 2     |                |           |                |           |
                           +-----------+                +-----------+                |           |
                           | Main1()   |                | Main1()   |                |           |
                           | a = 1     |                | a = 1     |                |           |
            Stack2 종료 -> +-----------+ Stack1 종료 -> +-----------+ Main1 종료 ->  +-----------+
        */



        /**************************************************************************
        * 힙 영역
        *
        * 클래스 인스턴스(객체)를 보관하는 영역
        * 프로그램은 가비지 콜렉터를 통해 더이상 사용하지 않는 인스턴스를 수거함
        **************************************************************************/

        // <가비지 콜렉터>
        //1. 가비지 콜렉터 대상 (오늘!)
        // 참조하는 변수가 더이상 없는 객체를 자동으로 (주기적으로) 삭제함 / 가비지콜렉터의 대상이 됨
        //2. 가비지 콜렉팅 알고리즘: 마크 앤 스위프트  (다음에)
        //3. 관리기법: 세대관리 (다음에)
        //+ 유니티 점진적 어쩌구..

        class HeapClass { } //클래스 생성하면 힙 영역에 저장됨

        void Main2()
        {
            // 함수 시작시
            // 지역변수 local 이 스택 영역에 저장됨

            HeapClass local;              // local은 지역변수로 스택영역에 저장, 함수 시작시 이미 메모리에 할당되어 있음
            local = new HeapClass();      // 새로만든 객체 힙 영역에 저장: 인스턴스를 힙영역에 생성하고 주소값을 local에 보관

            // 함수 종료시
            // 지역변수 local 이 함수 종료와 함께 소멸됨
            // 인스턴스 new HeapClass() 는 함수 종료와 함께 더이상 사용되지 않음 (더이상 참조하는 변수가 없음)
            // 인스턴스 new HeapClass() 는 가비지가 되어 가비지 컬렉터가 동작할 때 소멸됨
        }


        /**************************************************************************
        * 데이터 영역
        *
        * 정적(고정적)변수를 저장하는 영역
        * 프로그램은 시작시 데이터 영역을 생성하며 종료시 데이터 영역을 해제함
        **************************************************************************/

        // static 정적
        // dynamic 동적

        // <정적 (static)>
        // 프로그램의 시작과 함께 할당, 프로그램 종료시에 소멸, 프로그램이 동작하는 동안 항상 고정된 위치에 존재
        // 정적변수 : 프로그램 전역에서 접근 가능한 변수, 클래스의 이름을 통해 접근 가능

        // 정적함수 : 인스턴스 없이도 접근 가능한 함수, 클래스의 이름을 통해 접근 가능
        // 정적클래스 : 인스턴스 없이도 접근 가능한 클래스, 정적변수와 정적함수만을 포함 가능

        public class Player
        {
            public static int value;  // 어디서든 사용할 수 있음. 단 클래스 내부에 있어야함 (클래스 내부의 클래스에서도 접근 가능함)
            public static void Test()
            {

            }  // 정적함수 역시 어디서나 사용 가능      
        }

        public static class StaticClass // 정적 클래스는 정적변수와 정적함수만 갖고있는 클래스
        {
            public static int value;
            public static void Test()
            {

            }
        }

        //정적인 클래스에서 정적이 아닌 함수는 사용못하지만, 일반 클래스에서 정적함수는 사용가능하다.
        static void Main(string[] args)
        {
            Player.value = 10;
            Player.Test();  //class.이름으로 사용가능
        }

        class StaticClass1
        {
            public static int staticValue;
            public int nonStaticValue;

            public static void StaticFunc()
            {
                Console.WriteLine(staticValue);                     // 정적함수에서 정적변수를 사용
                // Console.WriteLine(nonStaticValue);               // error : 정적함수에서 멤버변수를 사용할 수 없음

                StaticClass1 staticClass1 = new StaticClass1();
                Console.WriteLine(staticClass1.nonStaticValue);     // 정적함수에서 생성한 인스턴스는 사용할 수 있음
            }

            public void NonStaticFunc()
            {
                Console.WriteLine(staticValue);
                Console.WriteLine(nonStaticValue);
            }
        }

        static class StaticClass2
        {
            // public int nonStaticValue;       // error : 정적클래스에서 멤버변수를 포함할 수 없음
            // public void NonStaticFunc() { }  // error : 정적클래스에서 멤버함수를 포함할 수 없음

            public static int staticValue;
            public static void StaticFunc() { }
        }

        void Main3()
        {
            StaticClass1.staticValue = 10;                  // 정적변수는 전역적으로 접근 가능
            StaticClass1.StaticFunc();                      // 정적함수는 전역적으로 접근 가능
            // StaticClass.nonStaticInt = 10;               // error : 맴버변수는 인스턴스가 있어야 사용가능
            // StaticClass.NonStaticFunc();                 // error : 맴버함수는 인스턴스가 있어야 사용가능

            StaticClass1 instance = new StaticClass1();
            instance.nonStaticValue = 20;                   // 맴버변수는 인스턴스가 각자 가지고 있으며 인스턴스를 통해 접근
            instance.NonStaticFunc();                       // 맴버함수는 인스턴스가 각자 가지고 있으며 인스턴스를 통해 접근
            // instance.staticInt = 20;                     // error : 정적변수는 인스턴스가 아닌 클래스이름을 통해서 접근
            // instance.StaticFunc();                       // error : 정적함수는 인스턴스가 아닌 클래스이름을 통해서 접근

            // StaticClass2 instance = new StaticClass2();  // error : 정적클래스는 인스턴스를 만들 수 없음
            StaticClass2.staticValue = 30;
            StaticClass2.StaticFunc();
        }

    }
}
